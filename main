nest_asyncio.apply()


os.environ["MISTRAL_API_KEY"] = "YOUR API KEY"


api_key = os.environ["MISTRAL_API_KEY"]
model = "mistral-large-latest"
client = Mistral(api_key=api_key)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç —Ç–µ–±–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /advice –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."
    )


async def advice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    prompt = """–¢—ã -- –≥–∞–¥–∞–ª–∫–∞ –Ω–∞ —Ç–∞—Ä–æ. –î–∞–π –º–∏–ª–æ–µ, –Ω–æ —Å–º–µ—à–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –±–æ–ª–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤—ã—Ç—è–Ω—É–≤ –∫–∞—Ä—Ç—É —Ç–∞—Ä–æ –∏ –¥–∞–≤ –µ–π –∏–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∞—Ü–∏—é, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞ –¥–ª–∏–Ω–æ—é –Ω–µ –±–æ–ª–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –¥–µ–ª–∞–π –ø—Ä–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ –∫–∞—Ä—Ç—ã. –¢–≤–æ–π –æ—Ç–≤–µ—Ç: "–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è ‚Äî <—Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞>", /n <–∏–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∞—Ü–∏—è>. –¥–∞–≤–∞–π —Ä–∞–∑–Ω—ã–µ –∏ –Ω–µ–ø–æ—Ö–æ–∂–∏–µ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞ –æ—Ç–≤–µ—Ç—ã.)"""

    try:
        response = client.chat.complete(
            model=model,
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                }
            ]
        )


        prediction_text = response.choices[0].message.content.strip()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Mistral API: {e}")
        prediction_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await update.message.reply_text(f"üîÆ –¢–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n{prediction_text}")


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} caused error {context.error}")


async def run_bot():
    token = " TELEGRAM BOT TOKEN"


    application = Application.builder().token(token).build()


    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("advice", advice))


    application.add_error_handler(error)


    await application.run_polling()


if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)


    loop.run_until_complete(run_bot())
